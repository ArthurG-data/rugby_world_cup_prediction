rwc23_file <- 'data/all_game_RWC2023.csv'
setwd("//wsl.localhost/Ubuntu-22.04/home/arthurg/Advanced_Project")
wc23_file <- 'data/all_games_RWC2023.csv'
install.packages('factorextra')
install.packages('Rtools')
install.packages(c("antiword", "bbmle", "bdsmatrix", "BH", "brio", "bslib", "callr", "circlize", "cli", "clue", "coda", "commonmark", "cowplot", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "evaluate", "fansi", "flextable", "future", "future.apply", "gdtools", "ggdendro", "ggforce", "ggplot2", "ggrepel", "ggsci", "ggVennDiagram", "globals", "glue", "hardhat", "haven", "htmltools", "htmlwidgets", "httpuv", "igraph", "jsonlite", "knitr", "later", "lava", "lifecycle", "listenv", "lme4", "locfit", "lubridate", "markdown", "Matrix", "MatrixModels", "matrixStats", "mixsqp", "munsell", "mvtnorm", "officer", "openssl", "parallelly", "patchwork", "pkgbuild", "pkgload", "plotly", "plyr", "prettyunits", "pROC", "processx", "progress", "promises", "ps", "psych", "qpdf", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "readODS", "readr", "readtext", "recipes", "reprex", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "rvest", "s2", "sass", "scales", "sf", "shape", "shiny", "stringi", "stringr", "svglite", "systemfonts", "testthat", "textshaping", "tidyr", "tidyselect", "timechange", "timeDate", "tinytex", "tweenr", "units", "utf8", "uuid", "vctrs", "vroom", "waldo", "withr", "wk", "xfun", "xml2", "yaml", "yulab.utils", "zip"))
install.packages('Rtools')
rwc23_file <- 'data/all_game_RWC2023.csv'
install.packages('factoextra')
data <- read.csv(rwc23_file)
setwd("//wsl.localhost/Ubuntu-22.04/home/arthurg/Advanced_Project")
rwc23_file <- 'data/all_game_RWC2023.csv'
data <- read.csv(rwc23_file)
rwc23_file <- '/data/all_games_RWC2023.csv'
data <- read.csv(rwc23_file)
rwc23_file <- 'data/all_games_RWC2023.csv'
rwc23_file <- 'data/all_games_RWC2023.csv'
data <- read.csv(rwc23_file)
View(data)
#load data
rwc23_file <- 'data/team_split.csv'
install.packages('factoextra')
#load data
rwc23_file <- 'data/team_split.csv'
data <- read.csv(rwc23_file)
rwc23_file <- 'data/team_split.csv'
data <- read.csv(rwc23_file)
data <- read.csv(rwc23_file)
View(data)
setwd("//wsl.localhost/Ubuntu-22.04/home/arthurg/Advanced_Project/PCA_rugby")
rwc23_file_diff <- 'diff_df.csv''
rwc23_relative_file <- 'split_df_relative.csv'
rwc23_file_diff <- 'diff_df.csv'
rwc23_file_diff <- 'diff_df.csv'
rwc23_file_diff
View(data)
data_diff <- read.csv(rwc23_relative_file)
data_diff <- read.csv(rwc23_file_diff)
rwc23_file_diff <- './diff_df.csv'
data_diff
data_diff <- read.csv(rwc23_file_diff)
rwc23_file_diff <- '../diff_df.csv'
data_diff <- read.csv(rwc23_file_diff)
View(data_diff)
View(data_diff)
Y_outcome = data_diff['Outcome']
X = data_diff.drop(variable_labels)
print(X)
View(X)
View(X)
X = subset(data_diff, select = -(variable_point_related,variable_outcome,variable_outcome) )
#
pca_outcome = pcaLogisticR(
formula = NULL,
data = NULL,
n.pc = 1,
scale = FALSE,
center = FALSE,
tol = 1e-04,
max.pc = NULL
)
View(Xselected)
View(Y_outcome)
Y_score = droplevels(data_diff['Score'])
View(Y_score)
View(Y_score)
rwc23_file_diff <- '../diff_df.csv'
rwc23_relative_file <- 'split_df_relative.csv'
data_diff <- read.csv(rwc23_file_diff)
variable_labels <-['Game.ID', 'Date', 'Team']
even_rows_df <- df[seq(0, nrow(df), by = 2), ]
even_rows_df <- df[seq(1, nrow(df), by = 2), ]
odd_indices <- seq(1, nrow(df), by = 2)
data_diff <- read.csv(rwc23_file_diff)
variable_labels <-['Game.ID', 'Date', 'Team']
rwc23_file_diff <- '../diff_df.csv'
rwc23_relative_file <- 'split_df_relative.csv'
data_diff <- read.csv(rwc23_file_diff)
variable_labels <-['Game.ID', 'Date', 'Team']
rwc23_file_diff <- '../diff_df.csv'
rwc23_relative_file <- 'split_df_relative.csv'
data_diff <- read.csv(rwc23_file_diff)
variable_labels <-c('Game.ID', 'Date', 'Team')
variable_point_related <-c('Tries','Conversions','Goals.Kicks.Successful ')
variable_outcome <- c('Score', 'Outcome')
#remove half
even_rows_df <- df[seq(1, nrow(data_diff), by = 2), ]
odd_indices <- seq(1, nrow(data_diff), by = 2)
# Keep only odd rows
odd_rows_df <- data_diff[odd_indices, ]
View(odd_rows_df)
View(odd_rows_df)
Y_score = droplevels(odd_rows_df['Score'])
Y_outcome = droplevels(odd_rows_df['Outcome'])
X = subset(odd_rows_df , select = -c(variable_point_related,variable_outcome) )
Y_score = droplevels(odd_rows_df['Score'])
Y_outcome = droplevels(odd_rows_df['Outcome'])
X = subset(odd_rows_df , select = -c(variable_point_related + variable_outcome) )
columns_to_exclude <- c(variable_point_related, variable_outcome)
Y_score = droplevels(odd_rows_df['Score'])
Y_outcome = droplevels(odd_rows_df['Outcome'])
X = subset(odd_rows_df , select = -columns_to_exclude )
id_df =  droplevels(odd_rows_df[variable_labels])
rwc23_file_diff <- '../diff_df.csv'
rwc23_relative_file <- 'split_df_relative.csv'
data_diff <- read.csv(rwc23_file_diff)
variable_labels <-c('Game.ID', 'Date', 'Team')
variable_point_related <-c('Tries','Conversions','Goals.Kicks.Successful ')
variable_outcome <- c('Score', 'Outcome')
id_df <-  droplevels(odd_rows_df[variable_labels])
points_df <- droplevels(odd_rows_df[variable_point_related])
variable_labels <-c('Game.ID', 'Date', 'Team')
variable_point_related <-c('Tries','Conversions','Goal.Kicks.Successful ')
variable_outcome <- c('Score', 'Outcome')
id_df <-  droplevels(odd_rows_df[variable_labels])
points_df <- droplevels(odd_rows_df[variable_point_related])
data_diff.columns
data_diff['Goal.Kicks.Successful']
rwc23_file_diff <- '../diff_df.csv'
rwc23_relative_file <- 'split_df_relative.csv'
data_diff['Conversions']
data_diff['Tries']
id_df <-  droplevels(odd_rows_df[variable_labels])
points_df <- droplevels(odd_rows_df[variable_point_related])
data_diff <- read.csv(rwc23_file_diff)
variable_labels <-c('Game.ID', 'Date', 'Team')
variable_point_related <-c('Tries','Conversions','Goal.Kicks.Successful ')
variable_outcome <- c('Score', 'Outcome')
id_df <-  droplevels(data_diff [variable_labels])
points_df <- droplevels(data_diff [variable_point_related])
data_diff <- read.csv(rwc23_file_diff)
variable_labels <-c('Game.ID', 'Date', 'Team')
variable_point_related <-c('Tries','Conversions','Goal.Kicks.Successful')
variable_outcome <- c('Score', 'Outcome')
id_df <-  droplevels(data_diff [variable_labels])
points_df <- droplevels(data_diff [variable_point_related])
#remove half
odd_indices <- seq(1, nrow(data_diff), by = 2)
# Keep only odd rows
odd_rows_df <- data_diff[odd_indices, ]
View(odd_rows_df)
View(odd_rows_df)
detach(odd_rows_df, columns = c(variable_labels, variable_point_related))
detach(odd_rows_df, columns = c(variable_point_related))
detach(odd_rows_df, columns = c('Game.ID', 'Date', 'Team')
detach(odd_rows_df, columns = c('Game.ID', 'Date', 'Team'))
new_df = subset(odd_rows_df , select = !(names(odd_rows_df ) %in% variable_labels))
new_df = subset(odd_rows_df , select = !(names(odd_rows_df ) %in% c(variable_labels, variable_point_related))
View(new_df)
View(new_df)
View(new_df)
data = odd_rows_df[, c(variable_point_related , variable_labels )]
View(data)
data = odd_rows_df[, ~c(variable_point_related , variable_labels )]
data = odd_rows_df[, -c(Game.ID, Date, Team, Tries, Conversations, Goal.Kicks.Successful )]
odd_rows_df <- data_diff[odd_indices, ]
data = odd_rows_df[, -c('Game.ID', Date, Team, Tries, Conversations, Goal.Kicks.Successful )]
data = odd_rows_df[, -c('Game.ID', 'Date', 'Team', 'Tries', 'Conversations', 'Goal.Kicks.Successful' )]
columns_to_remove <- c(variable_labels, variable_point_related)
columns_to_keep <- setdiff(names(odd_rows_df), columns_to_remove)
# Subset the data frame to keep only the desired columns
df_subset <- odd_rows_df[, columns_to_keep]
View(df_subset)
View(df_subset)
columns_to_remove <- c(variable_labels, variable_point_related, 'X')
#remove half
columns_to_keep <- setdiff(names(odd_rows_df), columns_to_remove)
# Subset the data frame to keep only the desired columns
df_subset <- odd_rows_df[, columns_to_keep]
Y_score = droplevels(odd_rows_df['Score'])
Y_outcome = droplevels(odd_rows_df['Outcome'])
# Subset the data frame to keep only the desired columns
View(odd_rows_df)
View(odd_rows_df)
data_diff <- read.csv(rwc23_file_diff)
variable_labels <-c('Game.ID', 'Date', 'Team')
variable_point_related <-c('Tries','Conversions','Goal.Kicks.Successful')
variable_outcome <- c('Score', 'Outcome')
columns_to_remove <- c(variable_labels, variable_point_related,variable_outcome, 'X')
#remove half
odd_indices <- seq(1, nrow(data_diff), by = 2)
# Keep only odd rows
odd_rows_df <- data_diff[odd_indices, ]
#exlude some columns
columns_to_keep <- setdiff(names(odd_rows_df), columns_to_remove)
Y_score = odd_rows_df['Score']
Y_outcome = odd_rows_df['Outcome']
# Subset the data frame to keep only the desired columns
df_subset <- odd_rows_df[, columns_to_keep]
formula <- as.formula(paste("Outcome ~", paste(setdiff(names(df_subset), "Outcome"), collapse = " + ")))
print(formula)
mylogit <- glm(formula, data = df_subset, family = "binomial")
rwc23_file_diff <- '../diff_df.csv'
rwc23_relative_file <- 'split_df_relative.csv'
data_diff <- read.csv(rwc23_file_diff)
variable_labels <-c('Game.ID', 'Date', 'Team')
variable_point_related <-c('Tries','Conversions','Goal.Kicks.Successful')
columns_to_remove <- c(variable_labels, variable_point_related, 'X')
#remove half
odd_indices <- seq(1, nrow(data_diff), by = 2)
# Keep only odd rows
odd_rows_df <- data_diff[odd_indices, ]
#exlude some columns
columns_to_keep <- setdiff(names(odd_rows_df), columns_to_remove)
# Subset the data frame to keep only the desired columns
df_subset <- odd_rows_df[, columns_to_keep]
#
formula <- as.formula(paste("Outcome ~", paste(setdiff(names(df_subset), "Outcome"), collapse = " + ")))
View(df_subset)
mylogit <- glm(formula, data = df_subset, family = "binomial")
summary(model)
summary(mylogit )
df_subset_scale <- df_subset %>% mutate_all(~(scale(.) %>% as.vector))
library(dplyr)
df_subset_scale <- df_subset %>% mutate_all(~(scale(.) %>% as.vector))
df_subset_scale <-  df_subset %>%
mutate_at(vars(-Outcome), ~ scale(.) %>% as.vector)
View(df_subset_scale)
View(df_subset_scale)
# Subset the data frame to keep only the desired columns
df_subset <- odd_rows_df[, columns_to_keep]
df_subset_outcome <- df_subset %>% select(-Score)
df_subset_scale <-  df_subset_outcome  %>%
mutate_at(vars(-Outcome), ~ scale(.) %>% as.vector)
View(df_subset_scale)
View(df_subset_scale)
#
formula <- as.formula(paste("Outcome ~", paste(setdiff(names(df_subset), "Outcome"), collapse = " + ")))
mylogit <- glm(formula, data = df_subset, family = "binomial")
summary(mylogit )
odd_rows_df <- data_diff[odd_indices, ]
replace_na_with_mean <- function(x) {
ifelse(is.na(x), mean(x, na.rm = TRUE), x)
}
odd_rows_df <- odd_rows_df %>%
mutate_if(is.numeric, replace_na_with_mean)
olumns_to_keep <- setdiff(names(odd_rows_df), columns_to_remove)
# Subset the data frame to keep only the desired columns
df_subset <- odd_rows_df[, columns_to_keep]
df_subset_outcome <- df_subset %>% select(-Score)
df_subset_scale <-  df_subset_outcome  %>%
mutate_at(vars(-Outcome), ~ scale(.) %>% as.vector)
#
formula <- as.formula(paste("Outcome ~", paste(setdiff(names(df_subset), "Outcome"), collapse = " + ")))
mylogit <- glm(formula, data = df_subset, family = "binomial")
summary(mylogit )
View(df_subset_scale)
View(df_subset_scale)
mylogit <- glm(formula, data = df_subset, family = "binomial"(link='logit'))
summary(mylogit )
print(formula )
formula <- as.formula(paste("Outcome ~", paste(setdiff(names(df_subset_scale), "Outcome"), collapse = " + ")))
print(formula )
mylogit <- glm(formula, data = df_subset, family = "binomial"(link='logit'))
summary(mylogit )
mylogit <- glm(formula, data = df_subset, family = binomial(link='logit'))
summary(mylogit )
#do logit
my_pcalogit <- caLogisticR(
formula = formula,
data = df_subset,
n.pc = 7,
scale = FALSE,
center = FALSE,
tol = 1e-04,
max.pc = 11
)
install.packages("pcaLogisticR")
library(pcaLogisticR)
install.packages("Rtools")
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("Rtools")
install.packages("pcaLogisticR")
install.packages("C:/Users/lorie/OneDrive/Bureau/rtools44-6104-6039.exe", repos = NULL)
install.packages("pcaLogisticR")
library(pcaLogisticR)
library(factoextra)
library(ggplot2)
library(gridExtra)
split_df <-'data/results_international/split_df_diff.csv'
data <- read.csv(split_df)
setwd("//wsl.localhost/Ubuntu-22.04/home/arthurg/Advanced_Project")
library(factoextra)
library(ggplot2)
library(gridExtra)
split_df <-'data/results_international/split_df_diff.csv'
data <- read.csv(split_df)
variables_to_remove <-c('Game ID', 'Date', 'Team', 'Score','Tries', 'Conversions','Goal Kicks Successful', 'Goal Kicks Attempted')
selected_data <- subset(data, select = -c(Game.ID,X, Date, Team, Score, Tries, Outcome,Conversions, Goal.Kicks.Successful, Goal.Kicks.Attempted) )
print(selected_data )
odd_rows_df <- selected_data [seq(1, nrow(selected_data ), by = 2), ]
even_rows_df <- selected_data[seq(2, nrow(selected_data), by = 2), ]
res.pca = prcomp(odd_rows_df, scale=TRUE)
#get eigenvalue and filter
eigenvalues <-  get_eigenvalue(res.pca)
components_to_keep <- eigenvalues > 1
fviz_eig(res.pca)
#get eigenvalue and filter
eig.val <- get_eigenvalue(res.pca)
p1 <- fviz_contrib(res.pca, choice = "var", axes = 1, top = 5) + ggtitle("PC1")
p2 <- fviz_contrib(res.pca, choice = "var", axes = 2, top = 5) + ggtitle("PC2")
p3 <- fviz_contrib(res.pca, choice = "var", axes = 3, top = 5) + ggtitle("PC3")
p4 <- fviz_contrib(res.pca, choice = "var", axes = 4, top = 5) + ggtitle("PC4")
p5 <- fviz_contrib(res.pca, choice = "var", axes = 5, top = 5) + ggtitle("PC5")
p6 <- fviz_contrib(res.pca, choice = "var", axes = 6, top = 5) + ggtitle("PC6")
p7 <- fviz_contrib(res.pca, choice = "var", axes = 7, top = 5) + ggtitle("PC7")
p8 <- fviz_contrib(res.pca, choice = "var", axes = 8, top = 5) + ggtitle("PC8")
# Combine plots into a grid
combined_plot <- grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol = 2)
ggsave("figures/combined_plot.png", plot = combined_plot, width = 16, height = 12)
# Print combined plot
print(combined_plot)
install.packages("readxl")
library(readxl)
split_df <-'data/results_international/split_df_diff.xlsx'
data <- read_excel(split_df)
print(data )
View(data)
View(data)
variables_to_remove <-c('Game ID', 'Date', 'Team', 'Score','Tries', 'Conversions','Goal Kicks Successful', 'Goal Kicks Attempted')
selected_data <- subset(data, select = -variables_to_remove )
selected_data <- subset(data, select = -c(Game ID,X, Date, Team, Score, Tries, Outcome,Conversions, Goal Kicks Successful, Goal Kicks Attempted) )
selected_data <- data[, !(names(data) %in% variables_to_remove)]
View(selected_data)
View(selected_data)
variables_to_remove <-c('Game ID','Outcome','...1', 'Date', 'Team', 'Score','Tries', 'Conversions','Goal Kicks Successful', 'Goal Kicks Attempted')
selected_data <- data[, !(names(data) %in% variables_to_remove)]
print(selected_data )
View(selected_data)
View(selected_data)
odd_rows_df <- selected_data [seq(1, nrow(selected_data ), by = 2), ]
even_rows_df <- selected_data[seq(2, nrow(selected_data), by = 2), ]
res.pca = prcomp(odd_rows_df, scale=TRUE)
#get eigenvalue and filter
eigenvalues <-  get_eigenvalue(res.pca)
components_to_keep <- eigenvalues > 1
fviz_eig(res.pca)
#get eigenvalue and filter
eig.val <- get_eigenvalue(res.pca)
p1 <- fviz_contrib(res.pca, choice = "var", axes = 1, top = 5) + ggtitle("PC1")
p2 <- fviz_contrib(res.pca, choice = "var", axes = 2, top = 5) + ggtitle("PC2")
p3 <- fviz_contrib(res.pca, choice = "var", axes = 3, top = 5) + ggtitle("PC3")
p4 <- fviz_contrib(res.pca, choice = "var", axes = 4, top = 5) + ggtitle("PC4")
p5 <- fviz_contrib(res.pca, choice = "var", axes = 5, top = 5) + ggtitle("PC5")
p6 <- fviz_contrib(res.pca, choice = "var", axes = 6, top = 5) + ggtitle("PC6")
p7 <- fviz_contrib(res.pca, choice = "var", axes = 7, top = 5) + ggtitle("PC7")
p8 <- fviz_contrib(res.pca, choice = "var", axes = 8, top = 5) + ggtitle("PC8")
# Combine plots into a grid
combined_plot <- grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol = 2)
ggsave("figures/combined_plot.png", plot = combined_plot, width = 16, height = 12)
# Print combined plot
print(combined_plot)
p1 <- fviz_contrib(res.pca, choice = "var", axes = 1, top = 10) + ggtitle("PC1")
p2 <- fviz_contrib(res.pca, choice = "var", axes = 2, top = 10) + ggtitle("PC2")
p3 <- fviz_contrib(res.pca, choice = "var", axes = 3, top = 10) + ggtitle("PC3")
p4 <- fviz_contrib(res.pca, choice = "var", axes = 4, top = 10) + ggtitle("PC4")
p5 <- fviz_contrib(res.pca, choice = "var", axes = 5, top = 10) + ggtitle("PC5")
p6 <- fviz_contrib(res.pca, choice = "var", axes = 6, top = 10) + ggtitle("PC6")
p7 <- fviz_contrib(res.pca, choice = "var", axes = 7, top = 10) + ggtitle("PC7")
p8 <- fviz_contrib(res.pca, choice = "var", axes = 8, top = 10) + ggtitle("PC8")
# Combine plots into a grid
combined_plot <- grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol = 2)
ggsave("figures/combined_plot.png", plot = combined_plot, width = 16, height = 12)
# Print combined plot
print(combined_plot)
ggsave("figures/combined_plot.png", plot = combined_plot, width = 16, height = 16)
# Print combined plot
print(combined_plot)
ggsave("figures/combined_plot.png", plot = combined_plot, width = 6, height = 10)
# Print combined plot
print(combined_plot)
ggsave("figures/combined_plot.png", plot = combined_plot, width = 8, height = 10)
# Print combined plot
print(combined_plot)
eig.val <- get_eigenvalue(res.pca)
p1 <- fviz_contrib(res.pca, choice = "var", axes = 1, top = 5) + ggtitle("PC1")
p2 <- fviz_contrib(res.pca, choice = "var", axes = 2, top = 5) + ggtitle("PC2")
p3 <- fviz_contrib(res.pca, choice = "var", axes = 3, top = 5) + ggtitle("PC3")
p4 <- fviz_contrib(res.pca, choice = "var", axes = 4, top = 5) + ggtitle("PC4")
p5 <- fviz_contrib(res.pca, choice = "var", axes = 5, top = 5) + ggtitle("PC5")
p6 <- fviz_contrib(res.pca, choice = "var", axes = 6, top = 5) + ggtitle("PC6")
p7 <- fviz_contrib(res.pca, choice = "var", axes = 7, top = 5) + ggtitle("PC7")
p8 <- fviz_contrib(res.pca, choice = "var", axes = 8, top = 5) + ggtitle("PC8")
# Combine plots into a grid
combined_plot <- grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, ncol = 2)
ggsave("figures/combined_plot.png", plot = combined_plot, width = 8, height = 10)
# Print combined plot
print(combined_plot)
